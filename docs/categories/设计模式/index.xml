<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 让代码飞一会</title>
    <link>https://feng-jin.github.io/codefly/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 让代码飞一会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Jul 2022 16:56:09 +0800</lastBuildDate><atom:link href="https://feng-jin.github.io/codefly/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go职责链模式,多级缓存</title>
      <link>https://feng-jin.github.io/codefly/share/go%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</link>
      <pubDate>Sat, 09 Jul 2022 16:56:09 +0800</pubDate>
      
      <guid>https://feng-jin.github.io/codefly/share/go%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</guid>
      <description>职责链模式 职责链模式，顾名思义，一条链，依次按照职责去执行。
打个比方，办理业务，如果窗口可以办理，则窗口办理完成。如果窗口没有权限或者其他原因不能办理，则找来上级办理，上级还不能，则找来上级的上级办理。
在编程上，可以考虑用职责链模式来处理多级缓存。
直接上代码 cache.go
package cache import ( &amp;#34;golib/tlog&amp;#34; ) type Cacher interface { HandleSet(k string, v []byte, expire int64) error HandleGet(k string) ([]byte, bool) } type Chain struct { Cacher ExpireParams float32 NextCache *Chain } func (c *Chain) SetNext(m *Chain) { c.NextCache = m } func (c *Chain) Set(k string, v []byte, expire int64) { expire = int64(float32(expire) * c.ExpireParams) err := c.HandleSet(k, v, expire) if err !</description>
    </item>
    
  </channel>
</rss>
